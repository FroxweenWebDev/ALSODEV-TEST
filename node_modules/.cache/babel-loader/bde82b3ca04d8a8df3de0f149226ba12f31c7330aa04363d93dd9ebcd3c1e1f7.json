{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, createTextVNode as _createTextVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"b\", null, \"Output array: \", -1 /* HOISTED */);\nconst _hoisted_2 = /*#__PURE__*/_createElementVNode(\"p\", null, \"Input array: [1, 3, 2, 2, 4, 3, 5, 6, 5]\", -1 /* HOISTED */);\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_createElementVNode(\"p\", null, [_createElementVNode(\"strong\", null, [_createTextVNode(\"Input array: \"), _createElementVNode(\"i\", null, _toDisplayString($data.arrayOf), 1 /* TEXT */)])]), _createElementVNode(\"p\", null, [_hoisted_1, _createElementVNode(\"span\", null, _toDisplayString(_ctx.uniqueSortedArray), 1 /* TEXT */)]), _hoisted_2, _createElementVNode(\"p\", null, \"Output array: \" + _toDisplayString($data.arrayOfOutput), 1 /* TEXT */)]);\n}","map":{"version":3,"names":["_createElementVNode","_createElementBlock","_toDisplayString","$data","arrayOf","_hoisted_1","_ctx","uniqueSortedArray","_hoisted_2","arrayOfOutput"],"sources":["D:\\Work\\www\\alsodev-test\\src\\components\\TaskThree.vue"],"sourcesContent":["<template>\r\n  <div>\r\n\t\t\r\n\t\t<p><strong>Input array: <i>{{ arrayOf }}</i></strong></p>\r\n    <p><b>Output array: </b><span>{{ uniqueSortedArray }}</span></p>\r\n\r\n    <p>Input array: [1, 3, 2, 2, 4, 3, 5, 6, 5]</p>\r\n    <p>Output array: {{ arrayOfOutput }}</p>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  data() {\r\n    return {\r\n      arrayOf: [1, 3, 2, 2, 4, 3, 5, 6, 5],\r\n      arrayOfOutput: [],\r\n    };\r\n  },\r\n  methods: {\r\n    getCountArray(arrayOf) {\r\n      const countMap = new Map();\r\n\r\n      arrayOf.forEach(number => {\r\n        if (countMap.has(number)) {\r\n          countMap.set(number, countMap.get(number) + 1);\r\n        } else {\r\n          countMap.set(number, 1);\r\n        }\r\n      });\r\n\r\n      const arrayOfOutput = [];\r\n      countMap.forEach((count, number) => {\r\n        const obj = {};\r\n        obj[number] = count;\r\n        arrayOfOutput.push(obj);\r\n      });\r\n\r\n      return arrayOfOutput;\r\n    },\r\n  },\r\n  created() {\r\n    this.arrayOfOutput = this.getCountArray(this.arrayOf);\r\n  },\r\n};\r\n</script>\r\n"],"mappings":";gCAIOA,mBAAA,CAAqB,WAAlB,gBAAc;gCAEpBA,mBAAA,CAA+C,WAA5C,0CAAwC;;;uBAL7CC,mBAAA,CAOM,cALND,mBAAA,CAAyD,YAAtDA,mBAAA,CAAkD,iB,iBAA1C,eAAa,GAAAA,mBAAA,CAAoB,WAAAE,gBAAA,CAAdC,KAAA,CAAAC,OAAO,iB,KACnCJ,mBAAA,CAAgE,YAA7DK,UAAqB,EAAAL,mBAAA,CAAoC,cAAAE,gBAAA,CAA3BI,IAAA,CAAAC,iBAAiB,iB,GAElDC,UAA+C,EAC/CR,mBAAA,CAAwC,WAArC,gBAAc,GAAAE,gBAAA,CAAGC,KAAA,CAAAM,aAAa,iB"},"metadata":{},"sourceType":"module","externalDependencies":[]}