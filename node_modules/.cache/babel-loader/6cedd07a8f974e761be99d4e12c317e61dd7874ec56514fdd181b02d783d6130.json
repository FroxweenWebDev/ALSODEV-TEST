{"ast":null,"code":"import { createElementVNode as _createElementVNode, toDisplayString as _toDisplayString, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"p\", null, \"Input array: [1, 3, 2, 2, 4, 3, 5, 6, 5]\", -1 /* HOISTED */);\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_hoisted_1, _createElementVNode(\"p\", null, \"Output array: \" + _toDisplayString($data.outputArray), 1 /* TEXT */)]);\n}","map":{"version":3,"names":["_createElementVNode","_createElementBlock","_hoisted_1","_toDisplayString","$data","outputArray"],"sources":["D:\\Work\\www\\alsodev-test\\src\\components\\TaskThree.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <p>Input array: [1, 3, 2, 2, 4, 3, 5, 6, 5]</p>\r\n    <p>Output array: {{ outputArray }}</p>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  data() {\r\n    return {\r\n      arrayOf: [1, 3, 2, 2, 4, 3, 5, 6, 5],\r\n      outputArray: [],\r\n    };\r\n  },\r\n  methods: {\r\n    getCountArray(arrayOf) {\r\n      const countMap = new Map();\r\n\r\n      arrayOf.forEach(number => {\r\n        if (countMap.has(number)) {\r\n          countMap.set(number, countMap.get(number) + 1);\r\n        } else {\r\n          countMap.set(number, 1);\r\n        }\r\n      });\r\n\r\n      const outputArray = [];\r\n      countMap.forEach((count, number) => {\r\n        const obj = {};\r\n        obj[number] = count;\r\n        outputArray.push(obj);\r\n      });\r\n\r\n      return outputArray;\r\n    },\r\n  },\r\n  created() {\r\n    this.outputArray = this.getCountArray(this.arrayOf);\r\n  },\r\n};\r\n</script>\r\n"],"mappings":";gCAEIA,mBAAA,CAA+C,WAA5C,0CAAwC;;;uBAD7CC,mBAAA,CAGM,cAFJC,UAA+C,EAC/CF,mBAAA,CAAsC,WAAnC,gBAAc,GAAAG,gBAAA,CAAGC,KAAA,CAAAC,WAAW,iB"},"metadata":{},"sourceType":"module","externalDependencies":[]}